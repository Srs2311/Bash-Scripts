#!/bin/bash
#creates a easier to use interface for ssh connections w/o the need for third party software
#Assumes there is a sshServers file in the same directory as the script. Planning on having system create file if needed. Also need to look into creating a config file to allow custom storage locations
#
#
#Function to start ssh connection. Collects username and collects ip address from database
startSSH() {
	echo "Input Username"
	read username
	ipaddr=$(tail -n +$selection sshServers| head -n 1 | cut -d ":" -f 4)
	port=$(tail -n $selection sshServers | head -n 1 | cut -d ":" -f 5)
	at='@'
	sshlogin=$username$at$ipaddr
	ssh -p $port $sshlogin
}
addServer() {
	echo Enter Hostname
	read hostName
	echo Enter a short description
	read desc
	echo Enter IP address
	read address
	echo Enter port
	read port
	entries=$(wc -l < sshServers)
	serverId=$(expr $entries + 1)
	echo "$serverId:$hostName:$desc:$address:$port" >> sshServers
}
#prints database table with available connections


#function to print address book
printMenu(){
	echo Initiate Connection:
	column -s ':' -t --table-name SSH-Servers --table-columns ID,HOSTNAME,SERVICE,ADDRESS --table-hide ADDRESS sshServers
	echo "(q)uit (a)dd server"
}


#wrapper for collecting selections. Allows user to select from options on the table, and cycles until user picks a valid option.
#
#starts by printing the address book, then listens for menu selections, then checks if the input was an int
#
repeat=true

while [ repeat ];do
	printMenu
	read selection
	if [ "$selection" == 'q' ];then 
		exit 0
	elif [ "$selection" == 'a' ];then
		addServer
		continue
	elif [ "$selection" == 'r'];then
		printMenu
	elif [ "$selection" -eq "$selection" ];then
		startSSH
	else
		echo enter a valid selection
	fi
done
